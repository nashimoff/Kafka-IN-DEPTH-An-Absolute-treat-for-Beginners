package basicCoding;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;


public class FirstKafkaConsumer {
	
	public static void main(String[] args) {
		
		String brokerHosts = "172.30.175.132:6091";
		String topic = "javacode-topic";
		String groupId = "firstJavaKafkaGroup";
		
		Properties einstein = new Properties();
		
		einstein.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,brokerHosts);
		einstein.put(ConsumerConfig.GROUP_ID_CONFIG,brokerHosts);
		einstein.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
		einstein.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
		einstein.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");
		
		//Create Kafka Consumer Instance
		KafkaConsumer<String, String> consumer = new KafkaConsumer<>(einstein);
		
		//Subscribe to that topic
		consumer.subscribe(Collections.singletonList(topic));
		
		//Code to read the 9 records
		try {
			while(true) {
				ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000));
				
				for(ConsumerRecord<String, String> saveConsumedValue : records) {
					System.out.printf("\nReceived Record key = %s value = %s) meta(partition = %d, offset = %d) %n",
							sendRecord.key(),
							sendRecord.value(),
							metadata.partition(),
							metadata.offset());
				}
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
}		